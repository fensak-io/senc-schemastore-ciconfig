/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Step =
  | "checkout"
  | "setup_remote_docker"
  | "add_ssh_keys"
  | string
  | string
  | {
      run?: {
        [k: string]: unknown | undefined;
      } & (
        | string
        | {
            /**
             * Command to run via the shell
             */
            command: string;
            /**
             * Title of the step to be shown in the CircleCI UI (default: full `command`)
             */
            name?: string;
            /**
             * Shell to use for execution command
             */
            shell?: string;
            /**
             * Additional environmental variables, locally scoped to command
             */
            environment?: {
              [k: string]: (string | number) | undefined;
            };
            /**
             * Whether or not this step should run in the background (default: false)
             */
            background?: boolean;
            /**
             * In which directory to run this step (default: `working_directory` of the job
             */
            working_directory?: string;
            /**
             * Elapsed time the command can run without output. The string is a decimal with unit suffix, such as "20m", "1.25h", "5s" (default: 10 minutes)
             */
            no_output_timeout?: string;
            /**
             * Specify when to enable or disable the step. Takes the following values: `always`, `on_success`, `on_fail` (default: `on_success`)
             */
            when?: "always" | "on_success" | "on_fail";
          }
      );
      checkout?: Checkout;
      setup_remote_docker?: SetupRemoteDocker;
      save_cache?: SaveCache;
      restore_cache?: {
        [k: string]: unknown | undefined;
      } & (
        | {
            /**
             * Single cache key to restore
             */
            key: string;
            /**
             * Title of the step to be shown in the CircleCI UI (default: 'Restoring Cache')
             */
            name?: string;
          }
        | {
            /**
             * Title of the step to be shown in the CircleCI UI (default: 'Restoring Cache')
             */
            name?: string;
            /**
             * List of cache keys to lookup for a cache to restore. Only first existing key will be restored.
             */
            keys: string[];
          }
      );
      deploy?: {
        [k: string]: unknown | undefined;
      } & ({
        [k: string]: unknown | undefined;
      } & (
        | string
        | {
            /**
             * Command to run via the shell
             */
            command: string;
            /**
             * Title of the step to be shown in the CircleCI UI (default: full `command`)
             */
            name?: string;
            /**
             * Shell to use for execution command
             */
            shell?: string;
            /**
             * Additional environmental variables, locally scoped to command
             */
            environment?: {
              [k: string]: (string | number) | undefined;
            };
            /**
             * Whether or not this step should run in the background (default: false)
             */
            background?: boolean;
            /**
             * In which directory to run this step (default: `working_directory` of the job
             */
            working_directory?: string;
            /**
             * Elapsed time the command can run without output. The string is a decimal with unit suffix, such as "20m", "1.25h", "5s" (default: 10 minutes)
             */
            no_output_timeout?: string;
            /**
             * Specify when to enable or disable the step. Takes the following values: `always`, `on_success`, `on_fail` (default: `on_success`)
             */
            when?: "always" | "on_success" | "on_fail";
          }
      ));
      store_artifacts?: StoreArtifacts;
      store_test_results?: StoreTestResults;
      persist_to_workspace?: PersistToWorkspace;
      attach_workspace?: AttachWorkspace;
      add_ssh_keys?: AddSshKeys;
      when?: When;
      unless?: Unless;
      [k: string]: unknown | undefined;
    };
export type Checkout = {
  [k: string]: unknown | undefined;
} & {
  /**
   * Title of the step to be shown in the CircleCI UI
   */
  name?: string;
  /**
   * Checkout directory (default: job's `working_directory`)
   */
  path?: string;
};
export type SetupRemoteDocker = {
  [k: string]: unknown | undefined;
} & {
  /**
   * Title of the step to be shown in the CircleCI UI
   */
  name?: string;
  /**
   * When `docker_layer_caching` is set to `true`, CircleCI will try to reuse Docker Images (layers) built during a previous job or workflow (Paid feature)
   */
  docker_layer_caching?: boolean;
  /**
   * If your build requires a specific docker image, you can set it as an image attribute
   */
  version?:
    | (
        | "20.10.24"
        | "20.10.23"
        | "20.10.18"
        | "20.10.17"
        | "20.10.14"
        | "20.10.12"
        | "20.10.11"
        | "20.10.7"
        | "20.10.6"
        | "20.10.2"
        | "19.03.13"
      )
    | string;
};
export type SaveCache = {
  [k: string]: unknown | undefined;
} & {
  /**
   * List of directories which should be added to the cache
   */
  paths: string[];
  /**
   * Unique identifier for this cache
   */
  key: string;
  /**
   * Title of the step to be shown in the CircleCI UI (default: 'Saving Cache')
   */
  name?: string;
  /**
   * Specify when to enable or disable the step. Takes the following values: `always`, `on_success`, `on_fail` (default: `on_success`)
   */
  when?: "always" | "on_success" | "on_fail";
};
export type StoreArtifacts = {
  [k: string]: unknown | undefined;
} & {
  /**
   * Title of the step to be shown in the CircleCI UI
   */
  name?: string;
  /**
   * Directory in the primary container to save as job artifacts
   */
  path: string;
  /**
   * Prefix added to the artifact paths in the artifacts API (default: the directory of the file specified in `path`)
   */
  destination?: string;
};
export type StoreTestResults = {
  [k: string]: unknown | undefined;
} & {
  /**
   * Title of the step to be shown in the CircleCI UI
   */
  name?: string;
  /**
   * Path (absolute, or relative to your `working_directory`) to directory containing subdirectories of JUnit XML or Cucumber JSON test metadata files
   */
  path: string;
};
export type PersistToWorkspace = {
  [k: string]: unknown | undefined;
} & {
  /**
   * Title of the step to be shown in the CircleCI UI
   */
  name?: string;
  /**
   * Either an absolute path or a path relative to `working_directory`
   */
  root: string;
  /**
   * Glob identifying file(s), or a non-glob path to a directory to add to the shared workspace. Interpreted as relative to the workspace root. Must not be the workspace root itself.
   */
  paths: string[];
};
export type AttachWorkspace = {
  [k: string]: unknown | undefined;
} & {
  /**
   * Title of the step to be shown in the CircleCI UI
   */
  name?: string;
  /**
   * Directory to attach the workspace to
   */
  at: string;
};
export type AddSshKeys = {
  [k: string]: unknown | undefined;
} & {
  /**
   * Title of the step to be shown in the CircleCI UI
   */
  name?: string;
  /**
   * Directory to attach the workspace to
   */
  fingerprints?: string[];
};
export type When = {
  [k: string]: unknown | undefined;
} & {
  condition: Logical;
  /**
   * A list of steps to be performed
   */
  steps: Step[];
};
/**
 * https://circleci.com/docs/configuration-reference#logic-statements
 *
 * A logical statement to be used in dynamic configuration
 */
export type Logical =
  | (string | boolean | number)
  | {
      /**
       * https://circleci.com/docs/configuration-reference#logic-statements
       *
       * Logical and: true when all statements in the list are true
       */
      and?: Logical[];
      /**
       * https://circleci.com/docs/configuration-reference#logic-statements
       *
       * Logical or: true when at least one statements in the list is true
       */
      or?: Logical[];
      not?: Logical1;
      /**
       * https://circleci.com/docs/configuration-reference#logic-statements
       *
       * True when all elements in the list are equal
       */
      equal?: unknown[];
      /**
       * https://circleci.com/docs/configuration-reference#logic-statements
       *
       * True when value matches the pattern
       */
      matches?: {
        pattern?: string;
        value?: string;
      };
    };
/**
 * https://circleci.com/docs/configuration-reference#logic-statements
 *
 * A logical statement to be used in dynamic configuration
 */
export type Logical1 =
  | (string | boolean | number)
  | {
      /**
       * https://circleci.com/docs/configuration-reference#logic-statements
       *
       * Logical and: true when all statements in the list are true
       */
      and?: Logical[];
      /**
       * https://circleci.com/docs/configuration-reference#logic-statements
       *
       * Logical or: true when at least one statements in the list is true
       */
      or?: Logical[];
      not?: Logical1;
      /**
       * https://circleci.com/docs/configuration-reference#logic-statements
       *
       * True when all elements in the list are equal
       */
      equal?: unknown[];
      /**
       * https://circleci.com/docs/configuration-reference#logic-statements
       *
       * True when value matches the pattern
       */
      matches?: {
        pattern?: string;
        value?: string;
      };
    };
export type Unless = {
  [k: string]: unknown | undefined;
} & {
  condition: Logical;
  /**
   * A list of steps to be performed
   */
  steps: Step[];
};
export type ExecutorChoice =
  | (
      | {
          /**
           * Shell to use for execution command in all steps. Can be overridden by shell in each step (default: See [Default Shell Options](https://circleci.com/docs/configuration-reference#default-shell-options)
           */
          shell?: string;
          /**
           * In which directory to run the steps.
           */
          working_directory?: string;
          /**
           * A map of environment variable names and values.
           */
          environment?: {
            [k: string]: (string | number) | undefined;
          };
          [k: string]: unknown | undefined;
        }
      | (undefined & (DockerExecutor | MachineExecutor | MacosExecutor))
      | undefined
    )
  | undefined;
/**
 * Options for the [machine executor](https://circleci.com/docs/configuration-reference#machine)
 */
export type MachineExecutor =
  | {
      machine?:
        | true
        | {
            /**
             * The VM image to use. View [available images](https://circleci.com/docs/configuration-reference/#available-linux-machine-images-cloud). **Note:** This key is **not** supported on the installable CircleCI. For information about customizing machine executor images on CircleCI installed on your servers, see our [VM Service documentation](https://circleci.com/docs/vm-service).
             */
            image:
              | "ubuntu-2004:2023.10.1"
              | "ubuntu-2004:2023.07.1"
              | "ubuntu-2004:2023.04.2"
              | "ubuntu-2004:2023.04.1"
              | "ubuntu-2004:2023.02.1"
              | "ubuntu-2004:2022.10.1"
              | "ubuntu-2004:2022.07.1"
              | "ubuntu-2004:2022.04.2"
              | "ubuntu-2004:2022.04.1"
              | "ubuntu-2004:202201-02"
              | "ubuntu-2004:202201-01"
              | "ubuntu-2004:202111-02"
              | "ubuntu-2004:202111-01"
              | "ubuntu-2004:202107-02"
              | "ubuntu-2004:202104-01"
              | "ubuntu-2004:202101-01"
              | "ubuntu-2004:202010-01"
              | "ubuntu-2004:current"
              | "ubuntu-2004:edge"
              | "ubuntu-2204:2023.10.1"
              | "ubuntu-2204:2023.07.2"
              | "ubuntu-2204:2023.04.2"
              | "ubuntu-2204:2023.04.1"
              | "ubuntu-2204:2023.02.1"
              | "ubuntu-2204:2022.10.2"
              | "ubuntu-2204:2022.10.1"
              | "ubuntu-2204:2022.07.2"
              | "ubuntu-2204:2022.07.1"
              | "ubuntu-2204:2022.04.2"
              | "ubuntu-2204:2022.04.1"
              | "ubuntu-2204:current"
              | "ubuntu-2204:edge"
              | "android:2023.10.1"
              | "android:2023.09.1"
              | "android:2023.08.1"
              | "android:2023.07.1"
              | "android:2023.06.1"
              | "android:2023.05.1"
              | "android:2023.04.1"
              | "android:2023.03.1"
              | "android:2023.02.1"
              | "android:2022.12.1"
              | "android:2022.09.1"
              | "android:2022.08.1"
              | "android:2022.07.1"
              | "android:2022.06.2"
              | "android:2022.06.1"
              | "android:2022.04.1"
              | "android:2022.03.1"
              | "android:2022.01.1"
              | "android:2021.12.1"
              | "android:2021.10.1"
              | "android:202102-01";
            /**
             * Set to `true` to enable [Docker Layer Caching](https://circleci.com/docs/docker-layer-caching). Note: If you haven't already, you must open a support ticket to have a CircleCI Sales representative contact you about enabling this feature on your account for an additional fee.
             */
            docker_layer_caching?: DockerLayerCaching & DockerLayerCaching1;
          };
      /**
       * Amount of CPU and RAM allocated for each job. View [available resource classes](https://circleci.com/docs/configuration-reference/#linuxvm-execution-environment)
       */
      resource_class?:
        | "medium"
        | "large"
        | "xlarge"
        | "2xlarge"
        | "2xlarge+"
        | "arm.medium"
        | "arm.large"
        | "arm.xlarge"
        | "arm.2xlarge";
      [k: string]: unknown | undefined;
    }
  | {
      machine?: {
        /**
         * The VM image to use. View [available images](https://circleci.com/docs/configuration-reference/#available-linux-gpu-images). **Note:** This key is **not** supported on the installable CircleCI. For information about customizing machine executor images on CircleCI installed on your servers, see our [VM Service documentation](https://circleci.com/docs/vm-service).
         */
        image: "linux-cuda-11:default" | "linux-cuda-12:default";
        docker_layer_caching?: DockerLayerCaching & DockerLayerCaching1;
      };
      /**
       * Amount of CPU and RAM allocated for each job. View [available resource classes](https://circleci.com/docs/configuration-reference/#gpu-execution-environment-linux)
       */
      resource_class?: "gpu.nvidia.medium" | "gpu.nvidia.large";
      [k: string]: unknown | undefined;
    }
  | {
      machine?: {
        /**
         * The VM image to use. View [available images](https://circleci.com/docs/configuration-reference/#available-windows-machine-images-cloud). **Note:** This key is **not** supported on the installable CircleCI. For information about customizing machine executor images on CircleCI installed on your servers, see our [VM Service documentation](https://circleci.com/docs/vm-service).
         */
        image:
          | "windows-server-2022-gui:2023.10.1"
          | "windows-server-2022-gui:2023.09.1"
          | "windows-server-2022-gui:2023.08.1"
          | "windows-server-2022-gui:2023.07.1"
          | "windows-server-2022-gui:2023.06.1"
          | "windows-server-2022-gui:2023.05.1"
          | "windows-server-2022-gui:2023.04.1"
          | "windows-server-2022-gui:2023.03.1"
          | "windows-server-2022-gui:2022.08.1"
          | "windows-server-2022-gui:2022.07.1"
          | "windows-server-2022-gui:2022.06.1"
          | "windows-server-2022-gui:2022.04.1"
          | "windows-server-2022-gui:current"
          | "windows-server-2022-gui:edge"
          | "windows-server-2019:2023.10.1"
          | "windows-server-2019:2023.08.1"
          | "windows-server-2019:2023.04.1"
          | "windows-server-2019:2022.08.1"
          | "windows-server-2019:current"
          | "windows-server-2019:edge";
        docker_layer_caching?: DockerLayerCaching & DockerLayerCaching1;
      };
      /**
       * Amount of CPU and RAM allocated for each job. View [available resource classes](https://circleci.com/docs/configuration-reference/#windows-execution-environment)
       */
      resource_class?:
        | "windows.medium"
        | "windows.large"
        | "windows.xlarge"
        | "windows.2xlarge";
      [k: string]: unknown | undefined;
    }
  | {
      machine?: {
        /**
         * The VM image to use. View [available images](https://circleci.com/docs/configuration-reference/#available-windows-gpu-image). **Note:** This key is **not** supported on the installable CircleCI. For information about customizing machine executor images on CircleCI installed on your servers, see our [VM Service documentation](https://circleci.com/docs/vm-service).
         */
        image:
          | "windows-server-2019-cuda:current"
          | "windows-server-2019-cuda:edge";
        docker_layer_caching?: DockerLayerCaching & DockerLayerCaching1;
      };
      /**
       * Amount of CPU and RAM allocated for each job. View [available resource classes](https://circleci.com/docs/configuration-reference/#gpu-execution-environment-windows)
       */
      resource_class?: "windows.gpu.nvidia.medium";
      [k: string]: unknown | undefined;
    };
export type DockerLayerCaching = boolean;
export type DockerLayerCaching1 = string;
export type ExecutorChoice1 = DockerExecutor | MachineExecutor | MacosExecutor;
/**
 * https://circleci.com/docs/configuration-reference#logic-statements
 *
 * A logical statement to be used in dynamic configuration
 */
export type Logical2 =
  | (string | boolean | number)
  | {
      /**
       * https://circleci.com/docs/configuration-reference#logic-statements
       *
       * Logical and: true when all statements in the list are true
       */
      and?: Logical[];
      /**
       * https://circleci.com/docs/configuration-reference#logic-statements
       *
       * Logical or: true when at least one statements in the list is true
       */
      or?: Logical[];
      not?: Logical1;
      /**
       * https://circleci.com/docs/configuration-reference#logic-statements
       *
       * True when all elements in the list are equal
       */
      equal?: unknown[];
      /**
       * https://circleci.com/docs/configuration-reference#logic-statements
       *
       * True when value matches the pattern
       */
      matches?: {
        pattern?: string;
        value?: string;
      };
    };
/**
 * https://circleci.com/docs/configuration-reference#logic-statements
 *
 * A logical statement to be used in dynamic configuration
 */
export type Logical3 =
  | (string | boolean | number)
  | {
      /**
       * https://circleci.com/docs/configuration-reference#logic-statements
       *
       * Logical and: true when all statements in the list are true
       */
      and?: Logical[];
      /**
       * https://circleci.com/docs/configuration-reference#logic-statements
       *
       * Logical or: true when at least one statements in the list is true
       */
      or?: Logical[];
      not?: Logical1;
      /**
       * https://circleci.com/docs/configuration-reference#logic-statements
       *
       * True when all elements in the list are equal
       */
      equal?: unknown[];
      /**
       * https://circleci.com/docs/configuration-reference#logic-statements
       *
       * True when value matches the pattern
       */
      matches?: {
        pattern?: string;
        value?: string;
      };
    };

export interface CircleCIConfig {
  /**
   * The version field is intended to be used in order to issue warnings for deprecation or breaking changes.
   */
  version: 2 | 2.1;
  orbs?: Orbs;
  commands?: Commands;
  executors?: Executors;
  jobs?: Jobs;
  /**
   * Used for orchestrating all jobs. Each workflow consists of the workflow name as a key and a map as a value
   */
  workflows?: {
    /**
     * The Workflows `version` field is used to issue warnings for deprecation or breaking changes during v2 Beta. It is deprecated as of CircleCI v2.1
     */
    version?: 2;
    [k: string]: // MANUALLY EDITED TO FIX COMPILE ERROR
    | number
      | {
          /**
           * Specifies which triggers will cause this workflow to be executed. Default behavior is to trigger the workflow when pushing to a branch.
           */
          triggers?: {
            /**
             * A workflow may have a schedule indicating it runs at a certain time, for example a nightly build that runs every day at 12am UTC:
             */
            schedule?: {
              /**
               * See the [crontab man page](http://pubs.opengroup.org/onlinepubs/7908799/xcu/crontab.html)
               */
              cron?: string;
              /**
               * A map defining rules for execution on specific branches
               */
              filters?: {
                branches?: Filter;
              };
              [k: string]: unknown | undefined;
            };
          }[];
          jobs?: (
            | string
            | {
                [k: string]: JobRef | undefined;
              }
          )[];
          when?: Logical2;
          unless?: Logical3;
        }
      | undefined;
  };
  [k: string]: unknown | undefined;
}
/**
 * https://circleci.com/docs/configuration-reference#orbs-requires-version-21
 *
 * Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
 */
export interface Orbs {
  [k: string]:
    | (
        | string
        | {
            orbs?: Orbs;
            commands?: Commands;
            executors?: Executors;
            jobs?: Jobs;
            [k: string]: unknown | undefined;
          }
      )
    | undefined;
}
/**
 * https://circleci.com/docs/configuration-reference#commands-requires-version-21
 *
 * A command definition defines a sequence of steps as a map to be executed in a job, enabling you to reuse a single command definition across multiple jobs.
 */
export interface Commands {
  /**
   * https://circleci.com/docs/configuration-reference#commands-requires-version-21
   *
   * Definition of a custom command.
   */
  [k: string]:
    | {
        /**
         * A sequence of steps run inside the calling job of the command.
         */
        steps: Step[];
        /**
         * https://circleci.com/docs/reusing-config#using-the-parameters-declaration
         *
         * A map of parameter keys.
         */
        parameters?: {
          /**
           * This interface was referenced by `undefined`'s JSON-Schema definition
           * via the `patternProperty` "^[a-z][a-z0-9_-]+$".
           */
          [k: string]:
            | (
                | {
                    type: "string";
                    description?: string;
                    default?: string;
                    [k: string]: unknown | undefined;
                  }
                | {
                    type: "boolean";
                    description?: string;
                    default?: boolean;
                    [k: string]: unknown | undefined;
                  }
                | {
                    type: "integer";
                    description?: string;
                    default?: number;
                    [k: string]: unknown | undefined;
                  }
                | {
                    type: "enum";
                    /**
                     * @minItems 1
                     */
                    enum: [string, ...string[]];
                    description?: string;
                    default?: string;
                    [k: string]: unknown | undefined;
                  }
                | {
                    type: "executor";
                    description?: string;
                    default?: string;
                    [k: string]: unknown | undefined;
                  }
                | {
                    type: "steps";
                    description?: string;
                    default?: Step[];
                    [k: string]: unknown | undefined;
                  }
                | {
                    type: "env_var_name";
                    description?: string;
                    default?: string;
                    [k: string]: unknown | undefined;
                  }
              )
            | undefined;
        };
        /**
         * A string that describes the purpose of the command.
         */
        description?: string;
        [k: string]: unknown | undefined;
      }
    | undefined;
}
/**
 * Executors define the environment in which the steps of a job will be run, allowing you to reuse a single executor definition across multiple jobs.
 */
export interface Executors {
  [k: string]: ExecutorChoice | undefined;
}
/**
 * Options for the [docker executor](https://circleci.com/docs/configuration-reference#docker)
 */
export interface DockerExecutor {
  docker: {
    /**
     * The name of a custom docker image to use
     */
    image: string;
    /**
     * The name the container is reachable by. By default, container services are accessible through `localhost`
     */
    name?: string;
    /**
     * The command used as executable when launching the container
     */
    entrypoint?: string | string[];
    /**
     * The command used as pid 1 (or args for entrypoint) when launching the container
     */
    command?: string | string[];
    /**
     * Which user to run the command as
     */
    user?: string;
    /**
     * A map of environment variable names and values
     */
    environment?: {
      [k: string]: (string | number | boolean) | undefined;
    };
    /**
     * Authentication for registries using standard `docker login` credentials
     */
    auth?: {
      username?: string;
      password?: string;
    };
    /**
     * Authentication for AWS EC2 Container Registry (ECR). You can use the access/secret keys or OIDC.
     */
    aws_auth?: {
      aws_access_key_id?: string;
      aws_secret_access_key?: string;
      oidc_role_arn?: string;
    };
  }[];
  /**
   * Amount of CPU and RAM allocated for each job. Note: A performance plan is required to access this feature.
   */
  resource_class?:
    | "small"
    | "medium"
    | "medium+"
    | "large"
    | "xlarge"
    | "2xlarge"
    | "2xlarge+"
    | "arm.medium"
    | "arm.large"
    | "arm.xlarge"
    | "arm.2xlarge";
  [k: string]: unknown | undefined;
}
/**
 * Options for the [macOS executor](https://circleci.com/docs/configuration-reference#macos)
 */
export interface MacosExecutor {
  macos: {
    /**
     * The version of Xcode that is installed on the virtual machine, see the [Supported Xcode Versions section of the Testing iOS](https://circleci.com/docs/testing-ios#supported-xcode-versions) document for the complete list.
     */
    xcode:
      | "15.1.0"
      | "15.0.0"
      | "14.3.1"
      | "14.2.0"
      | "14.1.0"
      | "14.0.1"
      | "13.4.1"
      | "12.5.1";
  };
  /**
   * Amount of CPU and RAM allocated for each job. View [available resource classes](https://circleci.com/docs/configuration-reference/#macos-execution-environment)
   */
  resource_class?:
    | "macos.x86.medium.gen2"
    | "macos.m1.medium.gen1"
    | "macos.m1.large.gen1";
  [k: string]: unknown | undefined;
}
/**
 * Jobs are collections of steps. All of the steps in the job are executed in a single unit, either within a fresh container or VM.
 */
export interface Jobs {
  [k: string]:
    | (
        | ExecutorChoice1
        | {
            /**
             * The name of the executor to use (defined via the top level executors map).
             */
            executor: string;
            [k: string]: unknown | undefined;
          }
        | {
            /**
             * Executor stanza to use for the job
             */
            executor: {
              /**
               * The name of the executor to use (defined via the top level executors map).
               */
              name: string;
              [k: string]: unknown | undefined;
            };
            [k: string]: unknown | undefined;
          }
      )
    | undefined;
}
/**
 * A map defining rules for execution on specific branches
 */
export interface Filter {
  /**
   * Either a single branch specifier, or a list of branch specifiers
   */
  only?: string | string[];
  /**
   * Either a single branch specifier, or a list of branch specifiers
   */
  ignore?: string | string[];
}
/**
 * Run a job as part of this workflow
 */
export interface JobRef {
  /**
   * Jobs are run in parallel by default, so you must explicitly require any dependencies by their job name.
   */
  requires?: string[];
  /**
   * The name key can be used to ensure build numbers are not appended when invoking the same job multiple times (e.g., sayhello-1, sayhello-2). The name assigned needs to be unique, otherwise numbers will still be appended to the job name
   */
  name?: string;
  /**
   * Either a single context name, or a list of contexts. The default name is `org-global`
   */
  context?: string | string[];
  /**
   * A job may have a `type` of `approval` indicating it must be manually approved before downstream jobs may proceed.
   */
  type?: "approval";
  /**
   * A map defining rules for execution on specific branches
   */
  filters?: {
    branches?: Filter;
    tags?: Filter;
  };
  /**
   * https://circleci.com/docs/configuration-reference#matrix-requires-version-21
   *
   * The matrix stanza allows you to run a parameterized job multiple times with different arguments.
   */
  matrix?: {
    /**
     * A map of parameter names to every value the job should be called with
     */
    parameters: {
      [k: string]: unknown[] | undefined;
    };
    /**
     * A list of argument maps that should be excluded from the matrix
     */
    exclude?: {
      [k: string]: unknown | undefined;
    }[];
    /**
     * An alias for the matrix, usable from another job's requires stanza. Defaults to the name of the job being executed
     */
    alias?: string;
  };
  [k: string]: unknown | undefined;
}
